{"version":3,"sources":["components/Todo.js","components/TodoForms.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","Button","variant","size","onClick","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","tasksRemaining","setTasksRemaining","completedTask","setCompletedTask","JSON","parse","window","localStorage","getItem","todos","setTodos","useEffect","filter","length","setItem","stringify","newTodos","completed","toast","success","removedTask","error","splice","Container","fluid","background","height","warning","warn","CardGroup","Card","Body","Subtitle","map","key","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.13d48b70.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"../App.css\";\r\n\r\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\r\n  return (\r\n    <div\r\n      className=\"todo\"\r\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\r\n    >\r\n      <div>\r\n        {todo.text}\r\n        <ToastContainer\r\n          position=\"top-center\"\r\n          autoClose={3000}\r\n          hideProgressBar={false}\r\n          newestOnTop={true}\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnVisibilityChange\r\n          draggable\r\n          pauseOnHover\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <Button\r\n          variant=\"success\"\r\n          size=\"sm\"\r\n          // style={{ background: \"green\", color: \"white\" }}\r\n          onClick={() => completeTodo(index)}\r\n        >\r\n          Complete\r\n        </Button>\r\n        <Button variant=\"danger\" size=\"sm\" onClick={() => removeTodo(index)}>\r\n          X\r\n        </Button>\r\n        {/* <button\r\n          type=\"button\"\r\n          class=\"btn btn-outline-danger\"\r\n          onClick={() => removeTodo(index)}\r\n        >\r\n          X\r\n        </button> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\n\r\n// To add new todo in the list (with form)\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const [value, setValue] = useState(\"\"); // value to store state, setValue to define how\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!value) return;\r\n\r\n    addTodo(value);\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"input\"\r\n        value={value}\r\n        placeholder=\"Add a new task\"\r\n        onChange={(e) => setValue(e.target.value)}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { Card, Container, CardGroup } from \"react-bootstrap\";\nimport Todo from \"./components/Todo\";\nimport TodoForm from \"./components/TodoForms\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const retrivedData = () => JSON.parse(window.localStorage.getItem(\"todos\")); // retriving string and coverting to object array\n  // const intialTodo = JSON.parse(retrivedData);\n\n  // const initialTaskRemaining = () =>\n  //   Number(window.localStorage.getItem(\"taskRemaining\")) || 0;\n  // const initialtaskCompleted = () =>\n  //   Number(window.localStorage.getItem(\"taskCompleted\")) || 0;\n\n  const [tasksRemaining, setTasksRemaining] = useState(0); //see what the number means= INITIAL VALUE OR DEFAULT VALUE\n  const [completedTask, setCompletedTask] = useState(0);\n  const [todos, setTodos] = useState(retrivedData); // using the retrived data as initial data array\n\n  // const [todos, setTodos] = useState([     // for static value i.e. without the use of local storage\n  // { text: \"Learn about React\", isCompleted: false },\n  // { text: \"Meet friend for lunch\", isCompleted: false },\n  // { text: \"Go out for snacks\", isCompleted: false }\n  // ]);\n\n  // The first parameter, todos, is what we are going to name our state.\n  // The second parameter, setTodos, is what we are going to use to set the state.\n\n  // update task remaining, i.e. todos with isComplete: false\n  useEffect(() => {\n    // console.log(todos.filter(todo => todo.issCompleted === undefined)); //\n    setTasksRemaining(\n      todos && todos.filter((todo) => !todo.isCompleted).length\n    );\n    setCompletedTask(\n      todos && todos.filter((todos) => todos.isCompleted).length\n    );\n\n    window.localStorage.setItem(\"todos\", JSON.stringify(todos)); // stores data in local storage in string form, so making array-object string\n\n    // window.localStorage.setItem(\"taskRemaining\", tasksRemaining); // these two not needed as we calculate them according to todos array\n    // window.localStorage.setItem(\"taskCompleted\", completedTask);\n  }, [todos]); // using [todos], so that the useEffect tasks works only when there is change in todos\n\n  const addTodo = (text) => {\n    if (todos && todos.length > 0) {\n      const newTodos = [...todos, { text }];\n      setTodos(newTodos);\n    } else {\n      const newTodos = [{ text: text }];\n      setTodos(newTodos);\n    }\n    const warning = text + \" is added\";\n    toast.warn(warning, {\n      position: \"top-right\",\n    });\n  };\n\n  const completeTodo = (index) => {\n    const newTodos = [...todos];\n    const completed = newTodos[index].text + \" is completed\";\n    toast.success(completed, {\n      position: \"top-right\",\n    });\n    // alert(newTodos[index].text + \" is completed\");\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (index) => {\n    const newTodos = [...todos];\n    const removedTask = newTodos[index].text + \" is removed\";\n    toast.error(removedTask, {\n      // position: toast.POSITION.TOP_RIGHT  (can use this or the bottom one)\n      position: \"top-right\",\n    });\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  // we'll render our todos here ...\n  // return <div></div>\n\n  // prob1\n\n  return (\n    <div className=\"app\">\n      <Container fluid style={{ background: \"#209cee\", height: \"100%\" }}>\n        <div className=\"header\">My TODOs</div>\n        <div className=\"todo-list\">\n          <div className=\"create-task\">\n            <TodoForm addTodo={addTodo} />\n          </div>\n          <CardGroup>\n            <Card>\n              <Card.Body>\n                <Card.Subtitle>Completed task ({completedTask})</Card.Subtitle>\n              </Card.Body>\n            </Card>\n            <Card>\n              <Card.Body>\n                <Card.Subtitle> Pending task ({tasksRemaining}) </Card.Subtitle>\n              </Card.Body>\n            </Card>\n          </CardGroup>\n\n          {todos &&\n            todos.map((todo, index) => (\n              <Todo\n                key={index}\n                index={index}\n                todo={todo}\n                completeTodo={completeTodo}\n                removeTodo={removeTodo}\n              />\n            ))}\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}